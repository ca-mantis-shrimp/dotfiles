@document.meta
title: index
description: 
authors: root
categories: 
created: 2023-04-05
updated: 2023-04-07
version: 1.0.0
@end
This is the configuration Neorg workspace. This workspace is extra special because it will be the site of an experiment.

We are going to attempt something I have wanted to try but have never felt like I had the tooling required.

Specifically, we are going to leverage the tangling feature of neorg to actually write the various configuration files needed to keep the system running.

We have gotten to the point where the code is rather concise, but it would take allot of context to understand what is going on in each file and how each one connects with the other.

This is where tangling comes in. These neorg files will actually generate the data that we expect to use throught this work.

As far as the structure goes I'm still tinkering with it but for right now I think there will be a norg file for every normal file unless they are rather small so I can ensure that everything is kept tidy

* {:Neovim/index:}[Neovim Configuration]
* Git
  The software that has enabled all of this is Chezmoi, a dotfile manager that can give users the ability to have a single configuration with minor edits to accomodate different OSs as well as different needs for different machines.

  While this wont be the main place we talk about the inner workings of Chezmoi, I will leave that to the {:$knowledge_base/Applications/Chezmoi/index:}[Chezmoi Knowledge Files]

  Instead, here we are going to define our chezmoi files and explain why we have made the decisions we did

** Git Configuration
   Our git configuration file is one of the first places where we start leveraging the template abilities of chezmoi:
   #tangle .gitconfig.tmpl
   @code gitconfig
   [user]
   {{- if eq .chezmoi.hostname "USMINDARBURGES1" }}
   email = darburgess@deloitte.com
   {{ else }}
   email = dargondab9@gmail.com
   {{- end }}
   name = Darrion Burgess

   [credential]
   helper = store
   @end
   - The main variation comes with the email that gets set for the git pieces
   -- the work one just changes the email to my standard work email
   -- While any other time we use the standard email associated with our personal GH account
   - Finally, we are using gits' built-in credential storing feature to store our PAT tokens within the local machine
   -- While it is generally considered bad-practice to store secret in plaintext in a repo, we have avoided that in the credential file itself by outsourcing this work to the 1password CLI which you will see below
*** Git Credentials
    Feel free to review the knowledge article on what the file even is, but sufficed to say it is a very simple, very brittle file that is used to authenticate to different git repos while not requiring the user to put in the password and username each time.
    - It's small, but it enables me to push and pull from my various private repos while still having the nice user experience of authenticating without typing the password in each time
    #tangle gitCredentials.tmpl
    @code template
    {{if eq .chezmoi.hostname "USMINDARBURGES1" -}}
    https://darburgess:{{ onepasswordRead "op://work/work_pat_token/password" }}@github.com
    {{else}}
    https://ca-mantis-shrimp:{{ onepasswordRead "op://Personal/personal_github_pat_token/password" }}@github.com
    {{ end }}
    @end
    - First, we should note that we are using a template to check if we are on our work computer (you just need to know that that is my work computer's hostname)
    -- Therefore, when I am on my work computer it will leverage the 1password CLI to look up the specific work PAT token for my work github account
    --- This is how we enable such a sensitive file to live in source control, since the pat token is only shown in the file itself and can be easily changed when I update to a new PAT token since they do expire after all
    --- Do also note here that we access `op` using a custom chezmoi template, chezmoi has access to several password managers and we can use this to place secrets in plaintext files only when we are syncing them to the local machine
    ---- even if these were discovered by a malicious actor, the nature of PAT tokens means we can regenerate them and replace them in less than a minute with this setup and without a single change to the code
    - Meanwhile, if we aren't on our work computer we will simply use the personal account's PAT token
    - This is also a good example of using an if and an else statement from the text language, allowing us to have traditional control flow
    -- Do note the `-` character at the end of the if loop declaration. Without this neovim would add a newline before doing the actual text.
    --- While not the end of the world, this can cause issues with the diffs always being different even if they have functionally the same text, so this ensure we always cut the newline before or after the statment
* Shell Configuration
  Here, we are going to walk through any configuration that is needed for the Shell in question, this will likely look largely the same, but with minor tweaks based on the OS or if it is a work machine but should otherwise remain minimal
** Bash
   Bash should be relatively straightforward, with the exception of my custom prompt and adding some things to the path
   #tangle .bashrc
   @code bash
   . "$HOME/.cargo/env"

   eval "$(starship init bash)"

   export PATH="/home/$USER/.local/share/bob/nvim-bin:$PATH"
   @end
   - First, remember that the `.` at the beginning is equivalent to if we had written the `source` command
   -- Therefore, we are effectively sourcing the `.cargo/env` file from the `$HOME` directory
   --- This requires that cargo is installed since this is ensuring we make the environment from cargo available to the shell
   - Second, we have the evaluation of the starship prompt
   -- This requires that the startship prompt is alread installed on the system
   - Finally, we are manually appending the absolute path to the binary that is currectly selected for bob-nvim, the Neovim version manager
   -- Again, this means we need to have bob-nvim alread installed on the machine for this to do anything
** PowerShell
   Powershell will look largely the same as bash, only with a few variations on the commands for PowerShell
   #tangle Microsoft.PowerShellProfile.ps1
   @code ps1
   Invoke-Expression (&starship init powershell)
   @end
   - Again, we are just invoking the startship prompt
   -- Therefore, we just need to be sure it is installed on the machine before we put this configuration file in here
