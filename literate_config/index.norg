@document.meta
title: index
description: 
authors: root
categories: 
created: 2023-04-05
updated: 2023-04-10
version: 1.0.0
@end
This is the configuration Neorg workspace. This workspace is extra special because it will be the site of an experiment.

We are going to attempt something I have wanted to try but have never felt like I had the tooling required.

Specifically, we are going to leverage the tangling feature of neorg to actually write the various configuration files needed to keep the system running.

We have gotten to the point where the code is rather concise, but it would take allot of context to understand what is going on in each file and how each one connects with the other.

This is where tangling comes in. These neorg files will actually generate the data that we expect to use throught this work.

As far as the structure goes I'm still tinkering with it but for right now I think there will be a norg file for every normal file unless they are rather small so I can ensure that everything is kept tidy

* {:wezterm:}[Wezterm Configuration]
* {:Neovim/index:}[Neovim Configuration]
* Chezmoi
  Chezmoi is the glue that is holding all of this together, and as such should be understood first only after Neovim itself
  Feel free to review the Chezmoi knowledge itself for further reference, here we are just going to define our chezmoi setup and why we made the decisions we did
** Config File
   We are opting to do the standard chezmoi TOML file
   #tangle .chezmoi.toml.tmpl
   @code toml
   {{ if eq .chezmoi.os "windows" }}
   [cd]
   command = "pwsh"
   {{ end }}

   [diff]
   command = "nvim"
   args = "-d"

   [edit]
   command = "nvim"

   [git]
   autoCommit = true
   @end
   - windows has this annoying thing where it defaults to the cmd for most things so we need to just start it in powershell whenever we use the `chezmoi cd` command
   - for the diffing mechanism between chezmoi and the files, I use neovim's default diff mode
   -- we do this by running neovim with the `-d` argument
   --- ( ) However, in the future I still want to change this over to using the diffview plugin instead to improve the user experience and get them all in one go
   - We are using neovim whenever we do `chezmoi edit`
   - Finally we have autocommit set to true so that whenever we add a change to our config it autocommits the changes to the repo to make the process of updating the config more seamless
** Ignore File
   Another surprisingly import file, since this is one of the main mechanisms we use to control the different configuration variations between the different OSs
   #tangle .chezmoiignore
   @code gitignore
   {{ if ne .chezmoi.os "windows" }}
   AppData/
   Documents/
   .chezmoiscripts/*.ps1
   {{ else }}
   .config/nvim/
   .chezmoiscripts/*.sh
   {{ end }}

   ./literate_config/
   @end
   - If we are not in windows, we are removing the `AppData`, `Documents`, and all PowerShell files from the `.chezmoiscripts` directory
   -- These folders are a microsoft thing, and shouldn't make their way into linux directories
   --- specifically, this is where the neovim config and powershell script are respectively.
   - Otherwise, we are removing the `nvim` folder from the `.config` file
   -- so we don't conflict with the version that is used in windows
   - finally, we ignore this folder! 
   -- because it is not intended to be copied to the machine's home directory, it is intended to serve as the brain of the repository itself and thus should never be included

* Git
  The software that has enabled all of this is Chezmoi, a dotfile manager that can give users the ability to have a single configuration with minor edits to accomodate different OSs as well as different needs for different machines.

  While this wont be the main place we talk about the inner workings of Chezmoi, I will leave that to the {:$knowledge_base/Applications/Chezmoi/index:}[Chezmoi Knowledge Files]

  Instead, here we are going to define our chezmoi files and explain why we have made the decisions we did

  Our git configuration file is one of the first places where we start leveraging the template abilities of chezmoi:
  #tangle .gitconfig.tmpl
  @code gitconfig
  [user]
  {{- if eq .chezmoi.hostname "USMINDARBURGES1" }}
  email = darburgess@deloitte.com
  {{ else }}
  email = dargondab9@gmail.com
  {{- end }}
  name = Darrion Burgess

  [credential]
  helper = store

  [core]
  symlinks = true
  @end
  - The main variation comes with the email that gets set for the git pieces
  -- the work one just changes the email to my standard work email
  -- While any other time we use the standard email associated with our personal GH account
  - Finally, we are using gits' built-in credential storing feature to store our PAT tokens within the local machine
  -- While it is generally considered bad-practice to store secret in plaintext in a repo, we have avoided that in the credential file itself by outsourcing this work to the 1password CLI which you will see below
  - finally we need to put in this symlinks option to make this symlink hack we are relying on work between windows and linux per {https://stackoverflow.com/questions/5917249/git-symbolic-links-in-windows/59761201#59761201}[This discussion about symlinks between linux and windows]
** Git Credentials
   Feel free to review the knowledge article on what the file even is, but sufficed to say it is a very simple, very brittle file that is used to authenticate to different git repos while not requiring the user to put in the password and username each time.
   - It's small, but it enables me to push and pull from my various private repos while still having the nice user experience of authenticating without typing the password in each time
   #tangle gitCredentials.tmpl
   @code template
   {{if eq .chezmoi.hostname "USMINDARBURGES1" -}}
   https://darburgess:{{ onepasswordRead "op://work/work_pat_token/password" }}@github.com
   {{- else}}
   https://ca-mantis-shrimp:{{ onepasswordRead "op://Personal/personal_github_pat_token/password" }}@github.com
   {{- end }}
   @end
   - First, we should note that we are using a template to check if we are on our work computer (you just need to know that that is my work computer's hostname)
   -- Therefore, when I am on my work computer it will leverage the 1password CLI to look up the specific work PAT token for my work github account
   --- This is how we enable such a sensitive file to live in source control, since the pat token is only shown in the file itself and can be easily changed when I update to a new PAT token since they do expire after all
   --- Do also note here that we access `op` using a custom chezmoi template, chezmoi has access to several password managers and we can use this to place secrets in plaintext files only when we are syncing them to the local machine
   ---- even if these were discovered by a malicious actor, the nature of PAT tokens means we can regenerate them and replace them in less than a minute with this setup and without a single change to the code
   - Meanwhile, if we aren't on our work computer we will simply use the personal account's PAT token
   - This is also a good example of using an if and an else statement from the text language, allowing us to have traditional control flow
   -- Do note the `-` character at the end of the if loop declaration. Without this neovim would add a newline before doing the actual text.
   --- While not the end of the world, this can cause issues with the diffs always being different even if they have functionally the same text, so this ensure we always cut the newline before or after the statment
   -- I also needed to add one before the else because it was still adding new lines for some reason? 
   -- I continued to have problems so I ended another one at the end of the `end` block
* Shell Configuration
  Here, we are going to walk through any configuration that is needed for the Shell in question, this will likely look largely the same, but with minor tweaks based on the OS or if it is a work machine but should otherwise remain minimal
** Bash
   Bash should be relatively straightforward, with the exception of my custom prompt and adding some things to the path
   #tangle .bashrc
   @code bash
   . "$HOME/.cargo/env"

   eval "$(starship init bash)"

   export PATH="/home/$USER/.local/share/bob/nvim-bin:$PATH"

   export NVM_DIR="$HOME/.nvm"
   [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
   [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
   @end
   - First, remember that the `.` at the beginning is equivalent to if we had written the `source` command
   -- Therefore, we are effectively sourcing the `.cargo/env` file from the `$HOME` directory
   --- This requires that cargo is installed since this is ensuring we make the environment from cargo available to the shell
   - Second, we have the evaluation of the starship prompt
   -- This requires that the startship prompt is alread installed on the system
   - We are manually appending the absolute path to the binary that is currectly selected for bob-nvim, the Neovim version manager
   -- Again, this means we need to have bob-nvim alread installed on the machine for this to do anything
   - Finally, exports nvms' bin via your `.bashrc` automatically after it is installed via the installation script in linux
   -- The line after that loads a shell script that makes nvm available to the system
   -- and finally loads bash completions once the first two steps are done so that the application is ready to use out of the box
** PowerShell
   Powershell will look largely the same as bash, only with a few variations on the commands for PowerShell
   #tangle Microsoft.PowerShellProfile.ps1
   @code ps1
   Invoke-Expression (&starship init powershell)
   @end
   - Again, we are just invoking the startship prompt
   -- Therefore, we just need to be sure it is installed on the machine before we put this configuration file in here

   This config file has less manual work than the bash file because windows in general believes less in managing system configuration through the shell.
   Instead they often opt to change configuration through dedicated GUI programs or other discrete tools that need to be setup before the shell is even started, however, once you are done, there is less manual wiring required to get the application running than in the bash shell.
* First-Time-Setup and Initial Machine Installations
  When we first get a machine, unless we are operating from a dockerized mindset, we will likely need to setup the environment first to ensure that everything we have setup above works as intended.
  This can be difficult as much of this is different between different OSs, and while some software can be installed easily and automatically, others must be install through more manual means that make it difficult to reproduce in an easy manner
** Linux
   First we will cover the linux things that need to get done since there seems to be a bit more to be done before we can use the bash shell
*** Installing Rust Toolchain
    The rust toolchains (including rustup, cargo, clippy, and more) can be installed with a one-line script:
    #tangle installCargo.sh.tmpl
    @code template
    #!/bin/bash
    if command -v cargo > dev/null; then
    echo "rust and cargo are already installed, exiting"
    exit
    else
    {{if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    {{else}}
    curl https://sh.rustup.rs -sSf | sh
    {{end}}
    fi
    @end
    - The first level of logic simply checks if we already have rust installed, since chezmoi tries to run the script each time to do an apply
    -- We only want to run the curl command(s) if we need to so first we check if cargo is executable, if so, we just exit early
    - This was grabbed directly from the {https://doc.rust-lang.org/cargo/getting-started/installation.html}[Rust Book's Installation Section]
    -- If all goes well, you should see a message that says "Rust is installed now. Great!"
    --- You will also need to restart your shell to ensure the new cargo environment is loaded
    ---- or you can just source your bashrc
    - We run one script if we are in a WSL distro specifically
    -- Otherwise, we are just going to run the standard installation script
** Windows
   Windows has actually become the easier of the two to install much of our software since it can often be accomplished with the new `winget` CLI tool
   Even if that one doesn't work, `scoop` or `choco` will likely have whatever winget is missing
*** Installing Rust Toolchain on Windows

