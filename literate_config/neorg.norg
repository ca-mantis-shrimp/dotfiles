@document.meta
title: Neorg Configuration
description: Configuration of the neorg note taking plugin
authors: Darrion Burgess
categories: neovim
created: 2023-04-09
updated: 2024-04-02T20:09:24-0800
version: 1.0.0
tangle: .local/share/chezmoi/.chezmoitemplates/Neovim/lua/plugins/neorg.lua
@end
Neorg is the primary tool used to replace things like markdown or even or org mode.

This is actually the tool we are using to write this literate configuration!

It takes more to setup than many of the other plugins but it can help with the ability to keep my thoughts together since it is the best note organization library and app i have found.
* Dependencies
  We have a few dependencies to take in because neorg utilizes many other plugins to get what it needs done.
  #tangle
  @code lua
  local neorg_dependencies = {
    "nvim-treesitter/nvim-treesitter",
    "hrsh7th/nvim-cmp",
    "nvim-neorg/neorg-telescope",
    {
      "folke/zen-mode.nvim",
      keys = { { "<leader>uz", "<cmd>ZenMode<cr>", desc = "Toggle Zen Mode" } },
      config = true,
      dependencies = { "folke/twilight.nvim", config = true },
    },
    { "luarocks.nvim" },
  }
  @end
  - Treesitter is the primary way that we are able to make sense of neorg files and are required to get not only syntax highlighting, but much of our other functionality as well since we rely on treesitter queries to do allot of automation.
  - These queries power cmp which uses some automation skripts created by the team to create completion entries while you type
  -- This inludes fun stuff like finishing todo actions
  -- making links
  -- and easily finishing stuff like code blocks
  - next we load the neorg telescope integration so that we can search our notes using telescope
  -- This extends to even being able to put links into the document while we are typing after we do a quick search first in telescope
  - Finally, zen mod is great for making a dedicated zen mode with our setup so that we have a way to easily focus when it is necessary
  -- we quickly set a hotkey to toggle zen mode within the UI section of our keymaps
  --- I put this here because it is deeply coupled with note taking i don't usually load this mode outside of neorg
  -- no real configuration to be done so we are able to just do `config = true` which translates to a normal setup run with no arguments
  -- Do not zen mode itself has a dependency in the form of twilight.nvim
  --- This is just used for the dimming effect when we go into zen mode, it makes the effect complete.
* Keymaps
  Neorg requires a bit more sophistication when it comes to keymaps because we must distringuish between two kinds here:
  - Keymaps that will start or load neorg
  -- Neorg is actually a fairly heavy plugin, so lazy loading it has resulted in a marked improvement of startup time. instead, we lazy load it if we use any of the following keymaps so we only pay the runtime cost when we actually need it and not when we are just trying to code
  - Keymaps that are used within a neorg document
  -- On top of making sure these plugins don't show up in other languages
  -- we are also defining these separately because sometimes we need to change an existing keymap that neorg already set
  --- in order to do this we are going to use neorg's own keybinding library to ensure this is all done within the system we defined
  #tangle
  @code lua
  local lazy_loading_keymaps = {
    { "<leader>nt", "<cmd>Neorg journal today<cr>",            desc = "Today's Journal Page" },
    { "<leader>nw", "<cmd>Neorg workspace work_notes<cr>",     desc = "Edit Work Notes" },
    { "<leader>nm", "<cmd>Neorg workspace main<cr>",           desc = "Edit Primary Notes" },
    { "<leader>nk", "<cmd>Neorg workspace knowledge_base<cr>", desc = "Edit Knowledge Base" },
    { "<leader>nc", "<cmd>Neorg workspace config<cr>",         desc = "Edit Literate Configuration" },
    { "<leader>ns", "<cmd>Neorg generate-workspace-summary<cr>", desc = "Generate Workspace Summary" },
  }
  local norg_buffer_keymaps = {
    config = {
      neorg_leader = "<Leader>",
      hook = function(keybinds)
        keybinds.remap_key("norg", "n", "<C-s>", "<C-t>")
        keybinds.remap_key("norg", "i", "<C-l>", "<CS-l>")
        keybinds.map("norg", "n", "<leader>se", "<cmd>Telescope neorg search_headings<CR>")
        keybinds.map("norg", "n", "<leader>nr", "<cmd>Neorg return<CR>")
        keybinds.map("norg", "n", "<leader>nT", "<cmd>Neorg tangle current-file<CR>")
        keybinds.map("norg", "n", "<leader>ni", "<cmd>Neorg index<CR>")
      end,
    },
  }

  @end
  - First we have the activation hotkeys to turn on neorg.
  -- First hotkey takes you directly to today's journaling page since we have our journal in neorg
  -- Next we have a quick hotkey to go to our work notes
  --- do note, this hotkey only works on my work laptop since it is the only one that will have the work neorg directory
  -- we then have a hotkey to go to our main neorg workspace
  --- good for debugging since that is our basic starting point
  -- we also have a hotkey to go to the knowledge base
  --- This is where "evergreen" or shared knowledge lives that is useful to both my personal and professional endeavors
  -- Then we have the hotkey to navigate to the literate config you are reading right now
  - Once we are in a norg file, we have introduced some extra keybinds for after neorg is loaded
  -- We also need to point out to neorg that `<space>` will be our leader
  -- first we needed to remap the default usage of `C-s` because it conflicted with my save hotkey
  -- ( ) we need to fix the second one, it is conflicting with wezterm right now
  -- the first new keymap is the ability to search the headings using telescope with `<leader>se`
  -- Neorg always keeps track of where you were before you entered neorg, so whenever you are ready to return to what you were doing before you started making notes, you can do `<leader>nr` to return to your previous activities
  -- Finally we have the code to actually tangle the file in the current buffer!
  --- This creates a new file in the current directory that will grab the tangled code and spit it out to that new file
* Module Configuration
  One of the pieces that excites me about neorg is that they have done a good job of splitting the project into modules so that you can configure, remove, and add modules to your heart's content.
  - This means that some modules need extra love but others can become invaluable
  - it also makes the prospect of adding to neorg easy since you can easily define and load a custom plugin without needing to contribute to neorg itself

  We are going to take some time to configure a few of the bigg modules to make the final setup function more concise
** Dirman
   Dirman is probably the primary module that needs to be updated frequently. This is the module that controls the list of neorg directories and where we list out the various directories that compose our neorg workspaces.
   It also has a few configuration options of its own that we can tinker with with whenever we need.
   #tangle
   @code lua
   local dirman_configuration = {
     config = {
       workspaces = {
         main = "~/neorg",
         work_notes = "~/work_neorg_notes",
         knowledge_base = "~/knowledge_base",
         config = "~/.local/share/chezmoi/literate_config",
         journal = "~/journal"
       },
       autochdir = true,
       index = "index.norg",
       last_workspace = vim.fn.stdpath("cache") .. "/neorg_last_workspace.txt",
     },
   }

   @end
   - first we define our various workspaces
   -- main is our primary workspace that we will keep journal notes and other personal notes
   -- work is meant for sensitive work-related notes and as such is only made available on the work laptop
   --- however it's nice that this doesn't break the plugin when i'm not on the work laptop
   -- knowledge base is where we keep much of our shared, evergreen knowledge
   -- config is the site of this literate config!
   --- intended to be the bain that powers my personal configuration and gives me context around all these tools i use.
   - With our workspaces defined we just have a few settings to set
   -- we note that we are using autochdir so that the ability to search for links properly works as we are flying around the neorg setup
   --- if we dont tick this then it breaks as we navigate through the knowledge base
   --- we can have a file with a different name that serves as the index for the folder, but here we opt for just the standard index file
   --- and finally we can define the last workspace by grabbing this last workspace.txt file that is apparently placed into our cache directory by neorg itself so we can easily go to the last workspace whenever we need
** Module List
   Here we will just define the entire module list so that we can discuss and grow it naturally over time
   I also want to decouple it from the rest of the lazy configuration because there is already enough to talk about in that chunk

   One note about lua before we dive in, one will immediately note that we have this strange way of setting different indexes within the table.
   This is using the same mechanism as if we were to set the index of a table with a number, only instead we are using strings instead.
   - This means each module is a table that is indexed via its name within one large table for neorg.
   - to remove a module we can just remove the entry in the table
   #tangle
   @code lua
   local module_list = {
     ["core.defaults"] = {},
     ["core.concealer"] = {},
     ["core.dirman"] = dirman_configuration,
     ["core.presenter"] = {
       config = {
         zen_mode = "zen-mode",
       },
     },
     ["core.completion"] = {
       config = {
         engine = "nvim-cmp",
       },
     },
     ["core.keybinds"] = norg_buffer_keymaps,
     ["core.qol.toc"] = {},
     ["core.journal"] = {
       config = {
         journal_folder = "/years/",
         use_folders = true,
         workspace = "journal",
       },
     },
     ["core.esupports.metagen"] = {
       config = {
         type = "auto",
       },
     },
     ["core.export"] = {},
     ["core.export.markdown"] = {
       config = {
         extensions = "all"
       },
     },
     ["core.integrations.telescope"] = {},
     ["core.summary"] = {},
     ["core.ui.calendar"] = {},
   }
   @end
   - First we have the defaults module which loads all the default modules for neorg to get us started
   - The concealer uses treesitter to dynamically hide content on the buffer page to make it easier to read
   -- this is how we have these funny characters replace the headers based on level and what not
   --- definately one of the more finicky parts of neorg but it does such good work that I can't stop it from doing its thing
   - we setup dirman with the table that was defined earlier
   - we are using zen.nvim as our writing zen mode and just highlighting that connection to neorg
   - we are also highlighting that we are using cmp as our completion engine and setting that for the neorg completion settings
   - keybinds are simply those post-loading keymaps we defined earlier along with setting the leader key
   - I also use neorg for journaling, and have been loving it
   -- we use the directory structure where we have files loaded within directories for each day
   -- we keep all of this in the main neorg workspace rather than a dedicated jouranl workspace
   --- ( ) although it might be worth making a dedicated journal workspace to ensure that is also decoupled from more banal thoughts that could be shared with others
   - another amazing feature is neorgs perpensity to put in metadata on the top of all files
   -- this is just a nice to have for now, but it points towards even deeper integrations since we can arbitrary data fields to documents so that we can easily search and automate them based on their metatdata
   --- for now we just automatically generate it but I look forward to using this as a process in and of itself
   - another critical piece for adoption is the ability to export these notes to other formats this is where the export module comes in so we can automatically make other file types based on this
   -- for now we only load the markdown export module for markdown integration but I look forward to seeing more
   - Next, we add the telescope integrations we got in the dependencies list. nothing to do on our end it will just add some neorg related commands within the telescope sub menu
   - We are trying an experimental new module called the summary module which may be doing what I have been wanting for literally months which is the ability to look at a given workspace and make all the metadata for that workspace give just the header on time I have to try and see but I am excited to give it a shot

* Setup
  With all that setup done we are ready to call the steup function itself
  #tangle
  @code lua
  return {
    {
      "vhyrro/luarocks.nvim",
      priority = 1000,
      config = true,
    },
    {
      "nvim-neorg/neorg",
      build = ":Neorg sync-parsers",
      dependencies = neorg_dependencies,
      ft = "norg",
      keys = lazy_loading_keymaps,
      config = function()
        require("neorg").setup({
          load = module_list,
        })
      end,
    },
  }
  @end
  - As I noted earlier, treesitter is an important part of making this all work so whenever we build a new version of neorg, we need to be sure to run that sync-parsers command
  -- this will go out and install the latest treesitter grammars and ensure we dont run into issues where we have an older treesitter grammer than the version of neorg itself
  - we place the dependencies from earlier here
  - we also place the activation hotkeys here to tell lazy to load neorg only after we click one of these hotkeys
  - we also have set a lazy load on filetype condition where we will load the plugin if we are editing a norg file within the current buffer
  - After that all we have to do is load the module list for our setup function and we are off to the races!
