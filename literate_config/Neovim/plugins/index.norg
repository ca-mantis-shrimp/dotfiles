@document.meta
title: index
description: 
authors: root
categories: 
created: 2023-04-07
updated: 2023-04-08
version: 1.0.0
@end
Plugins are what really makes Neovim special, and here we can explore the magic (and frustration) of using plugins created for Neovim by the community

I think to start, I am just going to start with the smaller stuff and then work through it one at a time. Especially large plugins will likely get their own file so I can decouple them from what I have to do with the others which can be generated all at once
* Toggle Term
  Firsfirst we have the excellent {https://github.com/akinsho/toggleterm.nvim/tree/b86982429325112d2b20c6d0cc7a5c4b182ab706}[toggleterm.nvim] plugin that can be used to facilitate a workflow where I occasionally _toggle_ a terminal page, do some actions, and leave

  The snippet for enabling this is even easy:
  #tangle toggleTerm.lua
  @code lua
  return {
    "akinsho/toggleterm.nvim",
    version = "*",
    opts = {
      open_mapping = [[<c-\>]],
    },
  }
  @end
  - The version piece here is just going to grab the latest standard version
  -- This works because toggleterm follows SemVer
  - Otherwise, we just have to set the hotkey to _toggle_ the terminal on and off.
  -- Here we are using the standard `<c-\>` function to enable or disable the terminal itself
  --- this is hitting a conflict with the standard hotkey for neorg right now, not sure if I want to change this from the default or what that would be
  --- This is a kinda nice hotkey because it works outside and inside of the terminal, whereas normal hotkeys don't work in a terminal because it is basically always in insert mode
* Portal Configuration
  Portal is an interesting little plugin that enables us to visualize the jumplist before you just jump there.
  #tangle portal.lua
  @code lua
  return {
    "cbochs/portal.nvim",
    dependencies = { "cbochs/grapple.nvim" },
    keys = {
      { "<leader>o", "<cmd>Portal jumplist backward<cr>" },
      { "<leader>i", "<cmd>Portal jumplist forward<cr>" },
    },
  }
  @end
  - {https://github.com/cbochs/grapple.nvim/tree/ab274a3bfb674442d57fca05df866b71895853bc}[grapple.nvim] serves as the core library that allows for this file list and enable the preview capabilities
  - Otherwise, the plugin is only loaded when you use either of the keybinds above
  -- we chose `<leader>`o and i because it mirrors the normal jumplist hotkeys to express that they are paralell but different features
* Noice
  {https://github.com/folke/noice.nvim}[noice.nvim] is a super interesting, experimental plugin that was made by our resident hero folke.

  This plugin does many things, but chief among them is:
  - Introduction of great notifications via noice.nvim
  - Replacing command lines with a new popup format
  - and a bunch of other little things that make neovim really feel like an editor from the twenty first century

  #tangle noice.lua
  @code lua
  return {
    "folke/noice.nvim",
    cond = not vim.g.started_by_firenvim,
  }
  @end
* LSP Lines
  By Default, LSP diagnostics are displayed as virtual text at the end of the line
  Virtual Text is the text that is made outside of the buffer and can move to stick to a specific line rather than being present in the buffer
  - However, this makes it dificult to read all bust the most succinct warnings/errors
  - doubly-so for the case where we have multiple diagnostics/errors to review

{https://github.com/ErichDonGubler/lsp_lines.nvim/tree/3b57922d2d79762e6baedaf9d66d8ba71f822816}[lsp_lines.nvim] attempts to fix this issue by replacing the default virtual text solution with one where instead each diagnostic gets its own line (hence the name) so multiple/long diagnostic messages can be shown without issue
  #tangle lspLines.lua
  @code lua
  return {
    "ErichDonGubler/lsp_lines.nvim",
    dependencies = { "neovim/nvim-lspconfig" },
    config = function()
      vim.diagnostic.config({
        virtual_text = false,
      })
      require("lsp_lines").setup()
    end,
    ft = { "lua", "python", "rust" },
  }
  @end
  - First, we need to ensure this is loaded after lspconfig since this relies on the configuration for this.
  - we have to use the functional way of setting up the plugin because we need to make a small change first
  -- The thing we need to do is disable the default virtual_text solution for diagnostics in Neovim
  --- if we dont, this will result in duplicate diagnostic messages when we are editing code
  --- afterwards, we can setup the plugin like normal
  - Finally, we need to restrict the filetypes that we enable lsp_lines on because otherwise we get annoying duplication in things like the lazy floating window
