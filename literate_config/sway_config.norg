@document.meta
title: Sway Configuration
description: Wayland Tile Window Manager for  Arch!
authors: Darrion Burgess
categories: tiling wm
tangle: ./dot_config/sway/config
created: 2023-12-06T18:57:29-0600
updated: 2023-12-06T19:14:04-0600
version: 1.1.1
@end
{https://github.com/swaywm/sway}[Sway] is the primary tiling wm for the wayland system that i was able to get working on arch linux

Default config for sway

Copy this to `~/.config/sway/config` and edit it to your liking.

Read `man 5 sway` for a complete reference.
* Application Defaults
  Tiling wms are about more than just windows. It is almost more accurate to describe them as complete desktop replacements. Lightweight, but complete. So we need to set some default applications

  #tangle
  @code bash
  set $term kitty

  set $menu ulauncher | xargs swaymsg exec --
  bar swaybar_command waybar
  include /etc/sway/config.d/*
  @end
  - We use kitty as our terminal emulator 
  - and ulauncher as our application searcher similar to the search in windows
  -- pass the final command to `swaymsg` so that the resulting window can be opened on the original workspace that the command was run on.
  - we also define the bar as the waybar which serves a similar purpose to the traditional taskbar
* Monitor Configuration
  Another detail that must be defined is the monitor resolution and layout. important when we starting thinking about things like external monitors so that you can control how it works
  #tangle
  @code bash
  output * bg $HOME/Pictures/christian-weiss-zc0LLV5gHu8-unsplash.jpg fill

  output LVDS-1 resolution 1600x900
  output VGA-1 resolution 1920x1080
  output DP-1 resolution 1920x1080
  @end
  - First, we choose the background image so make sure it exists!
  - Otherwise we choose the resolution for the different outputs
  -- the first one is the actual laptop screen
  -- the other two define the resolution for things attached to the ports if that becomes necessary
  -- You can get the names of your outputs by running: swaymsg -t get_outputs
** Controlling Idling
   Another thing we need to think about is the idle logic, otherwise, the laptop just stays on and wastes energy
   #tangle
   @code bash
   exec swayidle -w \
   timeout 300 'swaylock -f -c 000000' \
   timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
   before-sleep 'swaylock -f -c 000000'

   @end

   - This will lock your screen after 300 seconds of inactivity, then turn off your displays after another 300 seconds, and turn your screens back on when resumed. 
   -- It will also lock your screen before your computer goes to sleep.

* Basic Hotkeys and Movement
  First, we define out modifier key of preference and set some of our first few hotkeys
  #tangle
  @code bash
  set $mod Mod4
  set $left h
  set $down j
  set $up k
  set $right l
  @end
  - We use the windows key as our primary modifier key
  -- something like alt would be `Mod1`
  - Next, we make our basic set of keybinds to move around the windows using vim-like hotkeys
  -- specifically, we are giving the `h,j,k,l` set the names they refer to.
  --- this will become important as we define hotkeys that will use this shorthand for more readability

** Basic Launcher Hotkeys
   Our basics will take advantage of the default applications we defined earlier and now we are going to start utilizing those applications by using our defined hotkeys below
   #tangle
   @code bash
   bindsym $mod+Return exec $term
   bindsym $mod+Shift+q kill
   bindsym $mod+d exec $menu
   bindsym $mod+Shift+c reload

   floating_modifier $mod normal

   bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
   @end
   - we create a terminal with our modifier key and enter
   - modifier, shift, and q will kill the current window
   - modifier and d will open our application launcher
   -- remember we defined that above and serves a similar purpose to the search in other OS environments
   - modifier, shift, and c will reload the config file
   - we can resize windows by holding the modifier key and pressing the left click there
   - and ofcourse we have the hotkey to stop sway and leave back to the standard terminal
   -- we even have to define the message that shows before we leave

** Window Focus
   With the basics out of the way we can start updating the window positions and learn how to move these things around without worrying about the relative location of the window itself
   #tangle
   @code bash
   bindsym $mod+$left focus left
   bindsym $mod+$down focus down
   bindsym $mod+$up focus up
   bindsym $mod+$right focus right

   bindsym $mod+Left focus left
   bindsym $mod+Down focus down
   bindsym $mod+Up focus up
   bindsym $mod+Right focus right

   @end
   - we use the modifier key mixed with the vim movement keys to change the focus of the current window easily
   -- remember that we set the `$direction` variables earlier
   - we can also use the arrow keys to do the same thing

*** Moving Windows
    one of the most basic features of a tiling window manager is the ability to move windows around the screen in such a way that the screen will shift to accommodate the new positioning of the windows
    #tangle
    @code bash
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right

    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
    @end
    - we use the same modifier key and vim movement keys to move the windows around the screen
    -- only this time we add shift to move rather than focus the window
*** Layout Updates
    Another awesome activity is swapping two windows making it easy to alter a container and make it easier for us to move windows entirely with a single hotkey
    #tangle
    @code bash
    bindsym $mod+b splith
    bindsym $mod+v splitv

    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    bindsym $mod+f fullscreen

    bindsym $mod+Shift+space floating toggle
    bindsym $mod+space focus mode_toggle

    bindsym $mod+a focus parent

    bindsym $mod+Shift+minus move scratchpad
    bindsym $mod+minus scratchpad show

    @end
    - We can update the layout to either split horizontally or vertically using the modifier key and b or v
    - we can also change the layout to stacking or tabbed using the modifier key and s or w
    -- stacking will stack the windows on top of each other
    -- tabbed will stack the windows side by side
    -- we also have the ability to toggle focus between the floating window and the tiling windows behind it
    - we can also temporarily change a window to fullscreen and send it back using modifier and f
    - while we can also enter a focus mode that will only show a single window out of many temporarily
    - we also have a scratchpad that serves as the hidden list that we see in windows, if we want something to go away, we send it to the scratchpad and can use the mod and minus to bring it back
    -- if there is more than one put away then we will cycle through them
*** Resizing Windows
    We can also seamlessly update windows once we are done moving them around until we get everything working just right

    This is interesting because it is a little different than the other hotkeys we have seen so far as it we will be going into a resize mode where we can rapidly update the window size at once rather than hitting the same hotkey each time
    #tangle
    @code bash
    mode "resize" {
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    bindsym Return mode "default"
    bindsym Escape mode "default"
    }
    bindsym $mod+r mode "resize"

    @end
    - we enter the resize mode with the modifier key and r
    - once there, we can use either the vim movement keys defined above or the arrow keys to quickly update things
    - finally, we can exit the resize mode with either enter or escape

** Workspaces
   One of the most interestin pieces here is the workspaces. especially once we talk about multiple monitors. 
   Specifically, they key insight is that each monitor contains a list of workspaces that can be updated and changed independently of one another whereas most other os desktops have adopted the view that the monitors are all part of a single workspace

   This simple view is fine for normal people. but for vim people like myself this has made significant limitations around the ability to change and reason about monitors
   #tangle
   @code bash
   bindsym $mod+1 workspace number 1
   bindsym $mod+2 workspace number 2
   bindsym $mod+3 workspace number 3
   bindsym $mod+4 workspace number 4
   bindsym $mod+5 workspace number 5
   bindsym $mod+6 workspace number 6
   bindsym $mod+7 workspace number 7
   bindsym $mod+8 workspace number 8
   bindsym $mod+9 workspace number 9
   bindsym $mod+0 workspace number 10

   bindsym $mod+Shift+1 move container to workspace number 1
   bindsym $mod+Shift+2 move container to workspace number 2
   bindsym $mod+Shift+3 move container to workspace number 3
   bindsym $mod+Shift+4 move container to workspace number 4
   bindsym $mod+Shift+5 move container to workspace number 5
   bindsym $mod+Shift+6 move container to workspace number 6
   bindsym $mod+Shift+7 move container to workspace number 7
   bindsym $mod+Shift+8 move container to workspace number 8
   bindsym $mod+Shift+9 move container to workspace number 9
   bindsym $mod+Shift+0 move container to workspace number 10

   @end
   - we use the modifier key and the number keys to move to the different workspaces
   - while we can add shift to that combination to actually move the current window to the workspace

